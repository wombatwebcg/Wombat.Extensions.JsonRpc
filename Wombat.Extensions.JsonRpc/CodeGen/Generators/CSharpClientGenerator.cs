using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Wombat.Extensions.JsonRpc.Contracts;

namespace Wombat.Extensions.JsonRpc.CodeGen.Generators
{
    /// <summary>
    /// C#客户端代理生成器
    /// </summary>
    public class CSharpClientGenerator
    {
        private readonly ILogger<CSharpClientGenerator> _logger;

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="logger">日志记录器</param>
        public CSharpClientGenerator(ILogger<CSharpClientGenerator> logger = null)
        {
            _logger = logger;
        }

        /// <summary>
        /// 生成C#客户端代码
        /// </summary>
        /// <param name="metadata">服务元数据</param>
        /// <param name="options">生成选项</param>
        /// <returns>生成的代码</returns>
        public async Task<string> GenerateAsync(ServiceMetadata metadata, CodeGenerationOptions options = null)
        {
            options = options ?? CodeGenerationOptions.CreateDefault();
            
            _logger?.LogDebug("开始生成C#客户端代码: {ServiceName}", metadata.ServiceName);

            var sb = new StringBuilder();

            // 生成文件头
            GenerateFileHeader(sb, options);

            // 生成using语句
            GenerateUsings(sb);

            // 生成命名空间
            sb.AppendLine($"namespace {options.Namespace}");
            sb.AppendLine("{");

            // 生成接口定义
            GenerateInterface(sb, metadata, options);

            // 生成客户端实现
            GenerateClientImplementation(sb, metadata, options);

            sb.AppendLine("}");

            var result = sb.ToString();
            _logger?.LogDebug("C#客户端代码生成完成，长度: {Length}", result.Length);

            return result;
        }

        /// <summary>
        /// 生成文件头
        /// </summary>
        /// <param name="sb">字符串构建器</param>
        /// <param name="options">生成选项</param>
        private void GenerateFileHeader(StringBuilder sb, CodeGenerationOptions options)
        {
            sb.AppendLine("// <auto-generated>");
            sb.AppendLine($"// Generated at: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC");
            sb.AppendLine($"// Generator: Wombat.Extensions.JsonRpc.CodeGen");
            if (!string.IsNullOrEmpty(options.Author))
            {
                sb.AppendLine($"// Author: {options.Author}");
            }
            sb.AppendLine("// </auto-generated>");
            sb.AppendLine();
        }

        /// <summary>
        /// 生成using语句
        /// </summary>
        /// <param name="sb">字符串构建器</param>
        private void GenerateUsings(StringBuilder sb)
        {
            var usings = new[]
            {
                "using System;",
                "using System.Threading.Tasks;",
                "using System.ComponentModel.DataAnnotations;",
                "using Wombat.Extensions.JsonRpc.Client;",
                "using Wombat.Extensions.JsonRpc.Contracts;"
            };

            foreach (var usingStatement in usings)
            {
                sb.AppendLine(usingStatement);
            }
            sb.AppendLine();
        }

        /// <summary>
        /// 生成接口定义
        /// </summary>
        /// <param name="sb">字符串构建器</param>
        /// <param name="metadata">服务元数据</param>
        /// <param name="options">生成选项</param>
        private void GenerateInterface(StringBuilder sb, ServiceMetadata metadata, CodeGenerationOptions options)
        {
            var interfaceName = $"I{options.ClassPrefix}{GetServiceName(metadata)}{options.ClassSuffix}";

            if (options.IncludeDocumentation)
            {
                sb.AppendLine("    /// <summary>");
                sb.AppendLine($"    /// {metadata.Description ?? $"{metadata.ServiceName} RPC客户端接口"}");
                sb.AppendLine("    /// </summary>");
            }

            sb.AppendLine($"    public interface {interfaceName}");
            sb.AppendLine("    {");

            foreach (var method in metadata.Methods)
            {
                GenerateInterfaceMethod(sb, method, options);
            }

            sb.AppendLine("    }");
            sb.AppendLine();
        }

        /// <summary>
        /// 生成接口方法
        /// </summary>
        /// <param name="sb">字符串构建器</param>
        /// <param name="method">方法元数据</param>
        /// <param name="options">生成选项</param>
        private void GenerateInterfaceMethod(StringBuilder sb, MethodMetadata method, CodeGenerationOptions options)
        {
            if (options.IncludeDocumentation)
            {
                sb.AppendLine("        /// <summary>");
                sb.AppendLine($"        /// {method.Description ?? method.DisplayName}");
                sb.AppendLine("        /// </summary>");

                foreach (var param in method.Parameters)
                {
                    sb.AppendLine($"        /// <param name=\"{param.Name}\">{param.Description ?? param.Name}</param>");
                }

                if (!method.IsNotification)
                {
                    sb.AppendLine($"        /// <returns>{GetReturnTypeDescription(method.ReturnType)}</returns>");
                }
            }

            // 生成异步方法
            if (options.GenerateAsyncMethods)
            {
                var returnType = GetAsyncReturnType(method);
                var parameters = GenerateMethodParameters(method, options);
                sb.AppendLine($"        {returnType} {method.MethodName}Async({parameters});");
            }

            // 生成同步方法
            if (options.GenerateSyncMethods && !method.IsNotification)
            {
                var returnType = GetSyncReturnType(method);
                var parameters = GenerateMethodParameters(method, options);
                sb.AppendLine($"        {returnType} {method.MethodName}({parameters});");
            }

            sb.AppendLine();
        }

        /// <summary>
        /// 生成客户端实现
        /// </summary>
        /// <param name="sb">字符串构建器</param>
        /// <param name="metadata">服务元数据</param>
        /// <param name="options">生成选项</param>
        private void GenerateClientImplementation(StringBuilder sb, ServiceMetadata metadata, CodeGenerationOptions options)
        {
            var className = $"{options.ClassPrefix}{GetServiceName(metadata)}{options.ClassSuffix}";
            var interfaceName = $"I{className}";

            if (options.IncludeDocumentation)
            {
                sb.AppendLine("    /// <summary>");
                sb.AppendLine($"    /// {metadata.Description ?? $"{metadata.ServiceName} RPC客户端实现"}");
                sb.AppendLine("    /// </summary>");
            }

            sb.AppendLine($"    public class {className} : {interfaceName}, IDisposable");
            sb.AppendLine("    {");

            // 生成字段
            GenerateClientFields(sb);

            // 生成构造函数
            GenerateClientConstructors(sb, className);

            // 生成方法实现
            foreach (var method in metadata.Methods)
            {
                GenerateMethodImplementation(sb, method, options);
            }

            // 生成Dispose方法
            GenerateDisposeMethod(sb);

            sb.AppendLine("    }");
        }

        /// <summary>
        /// 生成客户端字段
        /// </summary>
        /// <param name="sb">字符串构建器</param>
        private void GenerateClientFields(StringBuilder sb)
        {
            sb.AppendLine("        private readonly IRpcClient _rpcClient;");
            sb.AppendLine("        private bool _disposed = false;");
            sb.AppendLine();
        }

        /// <summary>
        /// 生成客户端构造函数
        /// </summary>
        /// <param name="sb">字符串构建器</param>
        /// <param name="className">类名</param>
        private void GenerateClientConstructors(StringBuilder sb, string className)
        {
            sb.AppendLine("        /// <summary>");
            sb.AppendLine("        /// 构造函数");
            sb.AppendLine("        /// </summary>");
            sb.AppendLine("        /// <param name=\"rpcClient\">RPC客户端</param>");
            sb.AppendLine($"        public {className}(IRpcClient rpcClient)");
            sb.AppendLine("        {");
            sb.AppendLine("            _rpcClient = rpcClient ?? throw new ArgumentNullException(nameof(rpcClient));");
            sb.AppendLine("        }");
            sb.AppendLine();

            sb.AppendLine("        /// <summary>");
            sb.AppendLine("        /// 构造函数");
            sb.AppendLine("        /// </summary>");
            sb.AppendLine("        /// <param name=\"endpoint\">服务端点</param>");
            sb.AppendLine($"        public {className}(string endpoint)");
            sb.AppendLine("        {");
            sb.AppendLine("            _rpcClient = new RpcClient(endpoint);");
            sb.AppendLine("        }");
            sb.AppendLine();
        }

        /// <summary>
        /// 生成方法实现
        /// </summary>
        /// <param name="sb">字符串构建器</param>
        /// <param name="method">方法元数据</param>
        /// <param name="options">生成选项</param>
        private void GenerateMethodImplementation(StringBuilder sb, MethodMetadata method, CodeGenerationOptions options)
        {
            // 生成异步方法实现
            if (options.GenerateAsyncMethods)
            {
                GenerateAsyncMethodImplementation(sb, method, options);
            }

            // 生成同步方法实现
            if (options.GenerateSyncMethods && !method.IsNotification)
            {
                GenerateSyncMethodImplementation(sb, method, options);
            }
        }

        /// <summary>
        /// 生成异步方法实现
        /// </summary>
        /// <param name="sb">字符串构建器</param>
        /// <param name="method">方法元数据</param>
        /// <param name="options">生成选项</param>
        private void GenerateAsyncMethodImplementation(StringBuilder sb, MethodMetadata method, CodeGenerationOptions options)
        {
            var returnType = GetAsyncReturnType(method);
            var parameters = GenerateMethodParameters(method, options);

            sb.AppendLine("        /// <inheritdoc />");
            sb.AppendLine($"        public async {returnType} {method.MethodName}Async({parameters})");
            sb.AppendLine("        {");

            if (options.IncludeValidation)
            {
                GenerateParameterValidation(sb, method);
            }

            if (options.IncludeExceptionHandling)
            {
                sb.AppendLine("            try");
                sb.AppendLine("            {");
            }

            var methodCall = GenerateMethodCall(method);
            sb.AppendLine($"                {methodCall}");

            if (options.IncludeExceptionHandling)
            {
                sb.AppendLine("            }");
                sb.AppendLine("            catch (Exception ex)");
                sb.AppendLine("            {");
                sb.AppendLine($"                throw new RpcException($\"调用方法 '{method.MethodName}' 失败\", ex);");
                sb.AppendLine("            }");
            }

            sb.AppendLine("        }");
            sb.AppendLine();
        }

        /// <summary>
        /// 生成同步方法实现
        /// </summary>
        /// <param name="sb">字符串构建器</param>
        /// <param name="method">方法元数据</param>
        /// <param name="options">生成选项</param>
        private void GenerateSyncMethodImplementation(StringBuilder sb, MethodMetadata method, CodeGenerationOptions options)
        {
            var returnType = GetSyncReturnType(method);
            var parameters = GenerateMethodParameters(method, options);

            sb.AppendLine("        /// <inheritdoc />");
            sb.AppendLine($"        public {returnType} {method.MethodName}({parameters})");
            sb.AppendLine("        {");
            sb.AppendLine($"            return {method.MethodName}Async({GetParameterNames(method)}).GetAwaiter().GetResult();");
            sb.AppendLine("        }");
            sb.AppendLine();
        }

        /// <summary>
        /// 生成参数验证
        /// </summary>
        /// <param name="sb">字符串构建器</param>
        /// <param name="method">方法元数据</param>
        private void GenerateParameterValidation(StringBuilder sb, MethodMetadata method)
        {
            foreach (var param in method.Parameters.Where(p => p.IsRequired))
            {
                if (IsReferenceType(param.Type))
                {
                    sb.AppendLine($"            if ({param.Name} == null)");
                    sb.AppendLine($"                throw new ArgumentNullException(nameof({param.Name}));");
                }
            }

            if (method.Parameters.Any(p => p.IsRequired))
            {
                sb.AppendLine();
            }
        }

        /// <summary>
        /// 生成方法调用
        /// </summary>
        /// <param name="method">方法元数据</param>
        /// <returns>方法调用代码</returns>
        private string GenerateMethodCall(MethodMetadata method)
        {
            var parameterNames = GetParameterNames(method);

            if (method.IsNotification)
            {
                return $"await _rpcClient.NotifyAsync(\"{method.MethodName}\", {parameterNames});";
            }

            if (method.ReturnType == typeof(void) || method.ReturnType == typeof(Task))
            {
                return $"await _rpcClient.InvokeAsync(\"{method.MethodName}\", {parameterNames});";
            }

            var returnTypeName = GetTypeName(GetActualReturnType(method.ReturnType));
            return $"return await _rpcClient.InvokeAsync<{returnTypeName}>(\"{method.MethodName}\", {parameterNames});";
        }

        /// <summary>
        /// 生成Dispose方法
        /// </summary>
        /// <param name="sb">字符串构建器</param>
        private void GenerateDisposeMethod(StringBuilder sb)
        {
            sb.AppendLine("        /// <summary>");
            sb.AppendLine("        /// 释放资源");
            sb.AppendLine("        /// </summary>");
            sb.AppendLine("        public void Dispose()");
            sb.AppendLine("        {");
            sb.AppendLine("            if (!_disposed)");
            sb.AppendLine("            {");
            sb.AppendLine("                _rpcClient?.Dispose();");
            sb.AppendLine("                _disposed = true;");
            sb.AppendLine("            }");
            sb.AppendLine("        }");
        }

        /// <summary>
        /// 生成方法参数
        /// </summary>
        /// <param name="method">方法元数据</param>
        /// <param name="options">生成选项</param>
        /// <returns>参数字符串</returns>
        private string GenerateMethodParameters(MethodMetadata method, CodeGenerationOptions options)
        {
            var parameters = method.Parameters.Select(p =>
            {
                var typeName = GetTypeName(p.Type);
                var paramName = p.Name;
                var defaultValue = p.IsRequired ? string.Empty : " = default";

                return $"{typeName} {paramName}{defaultValue}";
            });

            return string.Join(", ", parameters);
        }

        /// <summary>
        /// 获取参数名称列表
        /// </summary>
        /// <param name="method">方法元数据</param>
        /// <returns>参数名称字符串</returns>
        private string GetParameterNames(MethodMetadata method)
        {
            if (method.Parameters == null || method.Parameters.Length == 0)
            {
                return string.Empty;
            }

            return string.Join(", ", method.Parameters.Select(p => p.Name));
        }

        /// <summary>
        /// 获取异步返回类型
        /// </summary>
        /// <param name="method">方法元数据</param>
        /// <returns>返回类型字符串</returns>
        private string GetAsyncReturnType(MethodMetadata method)
        {
            if (method.IsNotification)
            {
                return "Task";
            }

            if (method.ReturnType == typeof(void))
            {
                return "Task";
            }

            var actualReturnType = GetActualReturnType(method.ReturnType);
            return $"Task<{GetTypeName(actualReturnType)}>";
        }

        /// <summary>
        /// 获取同步返回类型
        /// </summary>
        /// <param name="method">方法元数据</param>
        /// <returns>返回类型字符串</returns>
        private string GetSyncReturnType(MethodMetadata method)
        {
            if (method.ReturnType == typeof(void) || method.ReturnType == typeof(Task))
            {
                return "void";
            }

            var actualReturnType = GetActualReturnType(method.ReturnType);
            return GetTypeName(actualReturnType);
        }

        /// <summary>
        /// 获取实际返回类型
        /// </summary>
        /// <param name="returnType">返回类型</param>
        /// <returns>实际返回类型</returns>
        private Type GetActualReturnType(Type returnType)
        {
            if (returnType.IsGenericType && returnType.GetGenericTypeDefinition() == typeof(Task<>))
            {
                return returnType.GetGenericArguments()[0];
            }

            return returnType;
        }

        /// <summary>
        /// 获取类型名称
        /// </summary>
        /// <param name="type">类型</param>
        /// <returns>类型名称</returns>
        private string GetTypeName(Type type)
        {
            if (type == typeof(void))
                return "void";
            if (type == typeof(string))
                return "string";
            if (type == typeof(int))
                return "int";
            if (type == typeof(long))
                return "long";
            if (type == typeof(bool))
                return "bool";
            if (type == typeof(double))
                return "double";
            if (type == typeof(decimal))
                return "decimal";
            if (type == typeof(DateTime))
                return "DateTime";
            if (type == typeof(Guid))
                return "Guid";

            if (type.IsGenericType)
            {
                var genericTypeName = type.Name.Substring(0, type.Name.IndexOf('`'));
                var genericArgs = string.Join(", ", type.GetGenericArguments().Select(GetTypeName));
                return $"{genericTypeName}<{genericArgs}>";
            }

            return type.Name;
        }

        /// <summary>
        /// 检查是否为引用类型
        /// </summary>
        /// <param name="type">类型</param>
        /// <returns>是否为引用类型</returns>
        private bool IsReferenceType(Type type)
        {
            return !type.IsValueType;
        }

        /// <summary>
        /// 获取服务名称
        /// </summary>
        /// <param name="metadata">服务元数据</param>
        /// <returns>服务名称</returns>
        private string GetServiceName(ServiceMetadata metadata)
        {
            return metadata.ServiceName?.Replace("Service", "").Replace("I", "") ?? "Unknown";
        }

        /// <summary>
        /// 获取返回类型描述
        /// </summary>
        /// <param name="returnType">返回类型</param>
        /// <returns>返回类型描述</returns>
        private string GetReturnTypeDescription(Type returnType)
        {
            if (returnType == typeof(void) || returnType == typeof(Task))
            {
                return "任务";
            }

            var actualType = GetActualReturnType(returnType);
            return $"包含{GetTypeName(actualType)}的任务";
        }
    }
} 